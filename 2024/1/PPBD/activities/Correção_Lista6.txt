Lista nº 6

23.	Criar uma procedure para inclusão de dados na tabela produto.
Execute antes o comando para criação da tabela PRODUTO, conforme abaixo:

CREATE TABLE produto
(codigo NUMBER(4) primary key,nome VARCHAR2(20),valor NUMBER(7,2),
 categoria NUMBER(4));
 
---------------------

CREATE OR REPLACE PROCEDURE INSERE_PRODUTO
(
	V_COD	IN	PRODUTO.CODIGO%TYPE		,
	V_NOME	IN	PRODUTO.NOME%TYPE		,
	V_VALOR	IN	PRODUTO.VALOR%TYPE		,
	V_CATEG	IN	PRODUTO.CATEGORIA%TYPE
)
IS
BEGIN
	INSERT INTO PRODUTO
	(CODIGO, NOME, VALOR, CATEGORIA)  -- OPCIONAL
	VALUES
	(V_COD, V_NOME, V_VALOR, V_CATEG)	;
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN
		DBMS_OUTPUT.PUT_LINE('CÓDIGO DO PRODUTO JÁ CADASTRADO!');
END INSERE_PRODUTO; 

--EXECUTANDO A PROCEDURE
EXEC INSERE_PRODUTO(&CODIGO, '&NOME', &VALOR, &CATEGORIA)

-- OU

DECLARE
    V_COD 	PRODUTO.CODIGO%type := &V_COD		;
	V_NOME	PRODUTO.NOME%TYPE := '&NOME'		;
	V_VAL	PRODUTO.VALOR%TYPE := &VALOR		;
	V_CATEG	PRODUTO.CATEGORIA%TYPE := &CATEGORIA;
BEGIN
    INSERE_PRODUTO(V_COD, V_NOME, V_VAL, V_CATEG);
END;
 

24.	Criar uma procedure para consultar um produto na tabela PRODUTO, 
informando o código através de parâmetro. Apresentar seu nome, valor e 
categoria.

Nota: Tratar erro caso o produto não seja encontrado.

Nota: Para executar a procedure, faça um bloco PL/SQL que chame a procedure 
passando parâmetro.

CREATE OR REPLACE PROCEDURE CONSULTA_PRODUTO
(
	V_COD	IN	PRODUTO.CODIGO%TYPE
)
IS -- EQUIVALENTE AO DECLARE
	V_NOME	PRODUTO.NOME%TYPE			;
	V_VALOR	PRODUTO.VALOR%TYPE			;
	V_CATEG PRODUTO.CATEGORIA%TYPE		;
BEGIN
	SELECT 	NOME, 	VALOR,	 CATEGORIA
	INTO	V_NOME, V_VALOR, V_CATEG
	FROM	PRODUTO
	WHERE	CODIGO = V_COD				;
	DBMS_OUTPUT.PUT_LINE('CÓDIGO: ' || V_COD)		;
	DBMS_OUTPUT.PUT_LINE('NOME: ' || V_NOME)		;
	DBMS_OUTPUT.PUT_LINE('CATEGORIA: ' || V_CATEG)	;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		DBMS_OUTPUT.PUT_LINE('CÓDIGO NÃO ENCONTRADO!')	;
END CONSULTA_PRODUTO;

--------------

-- EXECUTANDO A PROCEDURE
DECLARE
	V_COD	PRODUTO.CODIGO%TYPE	:= &CODIGO	;
BEGIN
	CONSULTA_PRODUTO(V_COD)	;
END;


25.	Criar a procedure NOTAS para atualizar valores em alguns campos da tabela
 ALUNO, conforme as seguintes regras:

?	MEDIA: (NOTA1+NOTA2)/2

?	RESULTADO: MEDIA >= 7 ? 'APROVADO '

?	RESULTADO: MEDIA <   7 ?  'EXAME '

Nota: Antes da procedure, criar a tabela e inserir linhas, conforme comandos 
abaixo:

CREATE TABLE ALUNO (RA NUMBER(5) PRIMARY KEY, NOME VARCHAR2(20),
NOTA1 NUMBER(3,1), NOTA2 NUMBER(3,1), MEDIA NUMBER(3,1), 
RESULTADO VARCHAR2(10));

INSERT INTO ALUNO (RA,NOME,NOTA1,NOTA2) VALUES (1,'ANTONIO',9,7);
INSERT INTO ALUNO (RA,NOME,NOTA1,NOTA2) VALUES (2,'BEATRIZ',4,6);
INSERT INTO ALUNO (RA,NOME,NOTA1,NOTA2) VALUES (3,'CLAUDIO',8,6);

---------------------

CREATE OR REPLACE PROCEDURE NOTAS
IS
	CURSOR C_ALUNO IS SELECT * FROM ALUNO	;
	V_MEDIA		ALUNO.MEDIA%TYPE			;
	V_RESULT 	ALUNO.RESULTADO%TYPE		;
BEGIN
	FOR V_REGALUNO IN C_ALUNO LOOP
		V_MEDIA := (V_REGALUNO.NOTA1 + V_REGALUNO.NOTA2) / 2 ;
		IF V_MEDIA >= 7 THEN
			V_RESULT := 'APROVADO'	;
		ELSE
			V_RESULT := 'EXAME'	;
		END IF;	
		UPDATE ALUNO
		SET
		MEDIA = V_MEDIA, RESULTADO = V_RESULT
		WHERE RA = V_REGALUNO.RA			;
	END LOOP;	
	DBMS_OUTPUT.PUT_LINE('REGISTROS ATUALIZADOS COM SUCESSO!');
END NOTAS;

--OU
CREATE OR REPLACE PROCEDURE NOTAS
IS
	CURSOR C_ALUNO IS SELECT * FROM ALUNO	;
	V_REG		C_ALUNO%ROWTYPE				;
	V_MEDIA		ALUNO.MEDIA%TYPE			;
	V_RESULT	ALUNO.RESULTADO%TYPE		;
BEGIN
    OPEN C_ALUNO							;
    FETCH C_ALUNO INTO V_REG					;
    WHILE C_ALUNO%FOUND	LOOP
		V_MEDIA := (V_REG.NOTA1 + V_REG.NOTA2) / 2	;
		IF 	V_MEDIA >= 7  THEN
			V_RESULT := 'APROVADO'	;
		ELSE
			V_RESULT := 'EXAME'	;
		END IF	;
		UPDATE ALUNO	
		SET
		MEDIA = V_MEDIA, RESULTADO = V_RESULT
		WHERE RA = V_REG.RA					;
		FETCH C_ALUNO INTO V_REG				;
	END LOOP	;	
	DBMS_OUTPUT.PUT_LINE('REGISTROS ATUALIZADOS COM SUCESSO!');
    CLOSE C_ALUNO   ;
END;

-- EXECUTANDO A PROCEDURE
EXEC NOTAS


26.	Procedure para MANIPULAÇÃO DE CURSORES com a cláusula FOR

Criar uma Procedure para selecionar da tabela lançamento os lançamentos 
de 106 a 114, que estejam com os valores negativos, mostrando na tela em 
seguida, através da clausula FOR com cursor explícito.

CREATE OR REPLACE PROCEDURE PROC_LANC_FOR 
IS
	CURSOR C_LANC IS SELECT N_CONTA, VALOR
	FROM LANC WHERE N_LANC BETWEEN 106 AND 114 AND VALOR < 0;
BEGIN
	FOR V_REG IN C_LANC LOOP
		DBMS_OUTPUT.PUT_LINE('Nº CONTA: ' || V_REG.N_CONTA || ' / VALOR: ' || V_REG.VALOR);
	END LOOP;
END PROC_LANC_FOR;

-- EXECUTANDO A PROCEDURE
EXEC PROC_LANC_FOR

27.	Procedure para MANIPULAÇÃO DE CURSORES com variaveis

Criar uma Procedure para selecionar da tabela lançamento os lançamentos de 
106 a 114, que estejam com os valores negativos, mostrando na tela em seguida,
utilizando cursores explícitos (OPEN, FETCH E CLOSE).

CREATE OR REPLACE PROCEDURE PROC_LANC 
IS
	CURSOR C_LANC IS SELECT N_CONTA, VALOR
	FROM LANC WHERE N_LANC BETWEEN 106 AND 114 AND VALOR < 0;
	V_REG C_LANC%ROWTYPE;
BEGIN
	OPEN C_LANC					;
	FETCH C_LANC INTO V_REG		;
	WHILE C_LANC%FOUND LOOP
		DBMS_OUTPUT.PUT_LINE('Nº CONTA: ' || V_REG.N_CONTA || ' / VALOR: ' || V_REG.VALOR);
		FETCH C_LANC INTO V_REG	;
	END LOOP;
	CLOSE C_LANC;	
END PROC_LANC;

-- EXECUTANDO A PROCEDURE
EXEC PROC_LANC